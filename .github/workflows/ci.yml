name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Use existing base compiler or build if needed
  check-base-compiler:
    runs-on: ubuntu-latest
    outputs:
      compiler-tag: ${{ steps.check.outputs.compiler-tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Determine compiler tag
      id: check
      run: |
        COMPILER_HASH="${{ hashFiles('**/shard.yml', '**/shard.lock', 'docker/compiler/**') }}"
        COMPILER_TAG="base-compiler-${COMPILER_HASH}"
        echo "compiler-tag=${COMPILER_TAG}" >> $GITHUB_OUTPUT
        echo "Using base compiler tag: ${COMPILER_TAG}"

  # Build runtime image using base compiler
  build-image:
    runs-on: ubuntu-latest
    needs: check-base-compiler
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and cache runtime image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runtime
        push: true
        platforms: linux/amd64
        # TODO: Add linux/arm64 when Crystal has official ARM64 support
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci-${{ github.sha }}
        cache-from: |
          type=gha,scope=base-compiler
          type=gha,scope=runtime
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-base-compiler.outputs.compiler-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-${{ github.sha }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        cache-to: |
          type=gha,mode=max,scope=runtime
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BASE_COMPILER_TAG=${{ needs.check-base-compiler.outputs.compiler-tag }}

  docker-lint:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Run linting with pre-built image
      run: |
        docker run --rm -v $(pwd)/server/src:/app/server/src:ro -v $(pwd)/client/src:/app/client/src:ro \
          --entrypoint sh ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci-${{ github.sha }} \
          -c "cd /app/server && ./bin/ameba src/ && cd /app/client && ./bin/ameba src/"

  docker-test:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Run connectivity test with pre-built image
      run: |
        # Start server
        docker run -d --name test-server -p 3000:3000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:ci-${{ github.sha }}
        
        # Wait for server to be ready
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
        # Test connectivity
        curl -f http://localhost:3000
        echo "âœ… Server connectivity test passed"
        
        # Clean up
        docker stop test-server
        docker rm test-server
