name: Build Base Compiler Image

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/compiler/**'
      - 'server/shard.yml'
      - 'server/shard.lock'
      - 'client/shard.yml'
      - 'client/shard.lock'
      - '.github/workflows/build-compiler.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/compiler/**'
      - 'server/shard.yml'
      - 'server/shard.lock'
      - 'client/shard.yml'
      - 'client/shard.lock'
      - '.github/workflows/build-compiler.yml'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-base-compiler:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=base-compiler-${{ hashFiles('**/shard.yml', '**/shard.lock', 'docker/compiler/**') }}
          type=raw,value=base-compiler-latest
          type=raw,value=base-compiler-{{branch}}
          type=raw,value=base-compiler-{{sha}}
    
    - name: Build and push base compiler image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/compiler/Dockerfile
        platforms: linux/amd64
        # TODO: Add linux/arm64 when Crystal has official ARM64 support
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=base-compiler
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-${{ hashFiles('**/shard.yml', '**/shard.lock', 'docker/compiler/**') }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-latest
        cache-to: |
          type=gha,mode=max,scope=base-compiler
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Output image tags
      run: |
        echo "Built base compiler image with tags:"
        echo "${{ steps.meta.outputs.tags }}"