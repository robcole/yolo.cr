name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Use existing base compiler
  check-base-compiler:
    runs-on: ubuntu-latest
    outputs:
      compiler-tag: ${{ steps.check.outputs.compiler-tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Determine compiler tag
      id: check
      run: |
        COMPILER_HASH="${{ hashFiles('**/shard.yml', '**/shard.lock', 'docker/compiler/**') }}"
        COMPILER_TAG="base-compiler-${COMPILER_HASH}"
        echo "compiler-tag=${COMPILER_TAG}" >> $GITHUB_OUTPUT
        echo "Using base compiler tag: ${COMPILER_TAG}"

  # Pre-build binaries for faster testing
  build-binaries:
    runs-on: ubuntu-latest
    needs: check-base-compiler
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and cache runtime image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: runtime
        push: true
        platforms: linux/amd64
        # TODO: Add linux/arm64 when Crystal has official ARM64 support
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number || 'main' }}
        cache-from: |
          type=gha,scope=base-compiler
          type=gha,scope=runtime
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-base-compiler.outputs.compiler-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-${{ github.sha }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base-compiler-latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        cache-to: |
          type=gha,mode=max,scope=runtime
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BASE_COMPILER_TAG=${{ needs.check-base-compiler.outputs.compiler-tag }}

  # Fast integration test using pre-built image
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Create optimized docker-compose for testing
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          game-server:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number || 'main' }}
            ports:
              - "3000:3000"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000"]
              interval: 5s
              timeout: 3s
              retries: 10
              start_period: 20s
            restart: "no"
          
          integration-test:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number || 'main' }}
            depends_on:
              game-server:
                condition: service_healthy
            command: >
              sh -c "
              echo 'ðŸ§ª Running integration tests against pre-built server...' &&
              echo 'Testing server connectivity...' &&
              curl -f --retry 5 --retry-delay 2 http://game-server:3000 &&
              echo 'âœ… Integration tests completed successfully'
              "
        EOF
    
    - name: Run fast integration test
      run: |
        docker compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from integration-test
    
    - name: Clean up test containers
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down --volumes --remove-orphans
