version: '3.8'

services:
  # Game server
  game-server:
    build: 
      context: .
      target: runtime
      cache_from:
        - docker.io/robcole/yolo.cr:base-compiler-latest
        - docker.io/robcole/yolo.cr:latest
        - docker.io/robcole/yolo.cr:main
      args:
        BUILDKIT_INLINE_CACHE: "1"
        DOCKER_BUILDKIT: "1"
    ports:
      - "3000:3000"
    volumes:
      # Mount state directory for persistence
      - ./server:/app/server:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  # Integration test runner
  integration-test:
    build: 
      context: .
      target: runtime
      cache_from:
        - docker.io/robcole/yolo.cr:base-compiler-latest
        - docker.io/robcole/yolo.cr:latest
        - docker.io/robcole/yolo.cr:main
      args:
        BUILDKIT_INLINE_CACHE: "1"
        DOCKER_BUILDKIT: "1"
    depends_on:
      game-server:
        condition: service_healthy
    volumes:
      - ./game_tests:/app/tests:ro
    command: >
      sh -c "
      echo '🧪 Running integration tests against containerized server...' &&
      /app/client/game_client --test-mode || true &&
      echo '✅ Integration tests completed'
      "
    profiles:
      - test

  # Linting and formatting check
  lint-check:
    build:
      context: .
      target: compiler
      cache_from:
        - docker.io/robcole/yolo.cr:base-compiler-latest
        - docker.io/robcole/yolo.cr:latest
        - docker.io/robcole/yolo.cr:main
      args:
        BUILDKIT_INLINE_CACHE: "1"
        DOCKER_BUILDKIT: "1"
    volumes:
      - ./server/src:/app/server/src:ro
      - ./client/src:/app/client/src:ro
    command: >
      sh -c "
      echo '🔍 Running linting checks...' &&
      cd server && ./bin/ameba src/ &&
      cd ../client && ./bin/ameba src/ &&
      echo '✅ Linting passed'
      "
    profiles:
      - test

  # Development environment with hot reload
  # Currently supports AMD64 architecture (Intel Mac/PC, Linux AMD64)
  # M4 Mac users: Use native Crystal installation via Homebrew for best performance
  # TODO: ARM64 Docker support when Crystal releases official ARM64 builds
  dev-server:
    build:
      context: .
      dockerfile: docker/compiler/Dockerfile
      target: final
    working_dir: /app
    volumes:
      - .:/app:rw
    ports:
      - "3000:3000"
    command: >
      sh -c "
      cd server &&
      shards install &&
      crystal run src/game_server.cr
      "
    profiles:
      - dev

  # Quick connectivity test
  quick-test:
    build: 
      context: .
      target: runtime
      cache_from:
        - docker.io/robcole/yolo.cr:base-compiler-latest
        - docker.io/robcole/yolo.cr:latest
        - docker.io/robcole/yolo.cr:main
      args:
        BUILDKIT_INLINE_CACHE: "1"
        DOCKER_BUILDKIT: "1"
    depends_on:
      game-server:
        condition: service_healthy
    command: >
      sh -c "
      echo '🔌 Testing server connectivity...' &&
      curl -f --retry 3 http://game-server:3000 &&
      echo '✅ Server connectivity test passed'
      "
    profiles:
      - test